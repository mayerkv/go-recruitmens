// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package recruitment_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecruitmentServiceClient is the client API for RecruitmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecruitmentServiceClient interface {
	PostVacancy(ctx context.Context, in *PostVacancyRequest, opts ...grpc.CallOption) (*PostVacancyResponse, error)
}

type recruitmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecruitmentServiceClient(cc grpc.ClientConnInterface) RecruitmentServiceClient {
	return &recruitmentServiceClient{cc}
}

func (c *recruitmentServiceClient) PostVacancy(ctx context.Context, in *PostVacancyRequest, opts ...grpc.CallOption) (*PostVacancyResponse, error) {
	out := new(PostVacancyResponse)
	err := c.cc.Invoke(ctx, "/RecruitmentService/PostVacancy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecruitmentServiceServer is the server API for RecruitmentService service.
// All implementations must embed UnimplementedRecruitmentServiceServer
// for forward compatibility
type RecruitmentServiceServer interface {
	PostVacancy(context.Context, *PostVacancyRequest) (*PostVacancyResponse, error)
	mustEmbedUnimplementedRecruitmentServiceServer()
}

// UnimplementedRecruitmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecruitmentServiceServer struct {
}

func (UnimplementedRecruitmentServiceServer) PostVacancy(context.Context, *PostVacancyRequest) (*PostVacancyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostVacancy not implemented")
}
func (UnimplementedRecruitmentServiceServer) mustEmbedUnimplementedRecruitmentServiceServer() {}

// UnsafeRecruitmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecruitmentServiceServer will
// result in compilation errors.
type UnsafeRecruitmentServiceServer interface {
	mustEmbedUnimplementedRecruitmentServiceServer()
}

func RegisterRecruitmentServiceServer(s grpc.ServiceRegistrar, srv RecruitmentServiceServer) {
	s.RegisterService(&RecruitmentService_ServiceDesc, srv)
}

func _RecruitmentService_PostVacancy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostVacancyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecruitmentServiceServer).PostVacancy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RecruitmentService/PostVacancy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecruitmentServiceServer).PostVacancy(ctx, req.(*PostVacancyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecruitmentService_ServiceDesc is the grpc.ServiceDesc for RecruitmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecruitmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RecruitmentService",
	HandlerType: (*RecruitmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostVacancy",
			Handler:    _RecruitmentService_PostVacancy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recruitment-service/recruitment-service.proto",
}
